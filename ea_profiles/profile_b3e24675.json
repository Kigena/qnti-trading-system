{
  "id": "b3e24675",
  "name": "EA Studio Gold M15",
  "description": "Expert Advisor imported from MQL code",
  "parameters": [
    {
      "name": "_Properties_",
      "type": "string",
      "default_value": "------",
      "description": "string parameter",
      "min_value": null,
      "max_value": null,
      "step": null
    },
    {
      "name": "Magic_Number",
      "type": "int",
      "default_value": 1224727994,
      "description": "int parameter",
      "min_value": null,
      "max_value": null,
      "step": null
    },
    {
      "name": "Entry_Amount",
      "type": "double",
      "default_value": 0.01,
      "description": "double parameter",
      "min_value": null,
      "max_value": null,
      "step": null
    },
    {
      "name": "Stop_Loss",
      "type": "int",
      "default_value": 1053,
      "description": "int parameter",
      "min_value": null,
      "max_value": null,
      "step": null
    },
    {
      "name": "Take_Profit",
      "type": "int",
      "default_value": 0,
      "description": "int parameter",
      "min_value": null,
      "max_value": null,
      "step": null
    },
    {
      "name": "___0______",
      "type": "string",
      "default_value": "------",
      "description": "string parameter",
      "min_value": null,
      "max_value": null,
      "step": null
    },
    {
      "name": "Ind0Param0",
      "type": "double",
      "default_value": 0.0,
      "description": "double parameter",
      "min_value": null,
      "max_value": null,
      "step": null
    },
    {
      "name": "___1______",
      "type": "string",
      "default_value": "------",
      "description": "string parameter",
      "min_value": null,
      "max_value": null,
      "step": null
    },
    {
      "name": "Ind1Param0",
      "type": "int",
      "default_value": 39,
      "description": "int parameter",
      "min_value": null,
      "max_value": null,
      "step": null
    },
    {
      "name": "Ind1Param1",
      "type": "double",
      "default_value": 0.0,
      "description": "double parameter",
      "min_value": null,
      "max_value": null,
      "step": null
    },
    {
      "name": "___2______",
      "type": "string",
      "default_value": "------",
      "description": "string parameter",
      "min_value": null,
      "max_value": null,
      "step": null
    },
    {
      "name": "Ind2Param0",
      "type": "int",
      "default_value": 30,
      "description": "int parameter",
      "min_value": null,
      "max_value": null,
      "step": null
    },
    {
      "name": "Ind2Param1",
      "type": "double",
      "default_value": 3.4,
      "description": "double parameter",
      "min_value": null,
      "max_value": null,
      "step": null
    },
    {
      "name": "___3______",
      "type": "string",
      "default_value": "------",
      "description": "string parameter",
      "min_value": null,
      "max_value": null,
      "step": null
    },
    {
      "name": "Ind3Param0",
      "type": "int",
      "default_value": 22,
      "description": "int parameter",
      "min_value": null,
      "max_value": null,
      "step": null
    },
    {
      "name": "Ind3Param1",
      "type": "int",
      "default_value": 7,
      "description": "int parameter",
      "min_value": null,
      "max_value": null,
      "step": null
    }
  ],
  "trading_rules": [
    {
      "type": "entry",
      "direction": "both",
      "conditions": [
        "#property copyright \"Forex Software Ltd.\" #property version \"6.3\" #property strict static input string _Properties_ = \"------\";static input int Magic_Number = 1224727994;static input double Entry_Amount = 0.01;input int Stop_Loss = 1053;input int Take_Profit = 0;static input string ___0______ = \"------\";input double Ind0Param0 = 0.0000;static input string ___1______ = \"------\";input int Ind1Param0 = 39;input double Ind1Param1 = 0.0000;static input string ___2______ = \"------\";input int Ind2Param0 = 30;input double Ind2Param1 = 3.4000;static input string ___3______ = \"------\";input int Ind3Param0 = 22;input int Ind3Param1 = 7;void InitIndicators(void)indHandlers[0][0][0] = iAC(NULL,0);if(Show_inds)ChartIndicatorAdd(0,1,indHandlers[0][0][0]);indHandlers[0][1][0] = iBullsPower(NULL,0,Ind1Param0);if(Show_inds)ChartIndicatorAdd(0,2,indHandlers[0][1][0]);indHandlers[0][2][0] = iBearsPower(NULL,0,Ind2Param0);if(Show_inds)ChartIndicatorAdd(0,3,indHandlers[0][2][0]);indHandlers[0][3][0] = -1;if(Show_inds)ChartIndicatorAdd(0,0,indHandlers[0][3][0]);int GetEntrySignal(void)double ind0buffer[];CopyBuffer(indHandlers[0][0][0],0,1,3,ind0buffer);double ind0val1 = ind0buffer[2];double ind0val2 = ind0buffer[1];double ind0val3 = ind0buffer[0];bool ind0long = ind0val1 < ind0val2 - sigma && ind0val2 > ind0val3 + sigma;bool ind0short = ind0val1 > ind0val2 + sigma && ind0val2 < ind0val3 - sigma;double ind1buffer[];CopyBuffer(indHandlers[0][1][0],0,1,3,ind1buffer);double ind1val1 = ind1buffer[2];double ind1val2 = ind1buffer[1];bool ind1long = ind1val1 > ind1val2 + sigma;bool ind1short = ind1val1 < ind1val2 - sigma;double ind2buffer[];CopyBuffer(indHandlers[0][2][0],0,1,3,ind2buffer);double ind2val1 = ind2buffer[2];double ind2val2 = ind2buffer[1];bool ind2long = ind2val1 < Ind2Param1 - sigma && ind2val2 > Ind2Param1 + sigma;bool ind2short = ind2val1 > -Ind2Param1 + sigma && ind2val2 < -Ind2Param1 - sigma;bool canOpenLong = ind0long && ind1long && ind2long;bool canOpenShort = ind0short && ind1short && ind2short;return canOpenLong && !canOpenShort ? OP_BUY : canOpenShort && !canOpenLong ? OP_SELL : OP_FLAT;void ManageClose(void)bool ind3long = false;bool ind3short = false;int consecutiveBullish = 0;int consecutiveBearish = 0;double pipVal = pip * Ind3Param0;for(int b = Ind3Param1 + 2;b > 0;b--)consecutiveBullish = Close(b)- Open(b)>= pipVal ? consecutiveBullish + 1 : 0;consecutiveBearish = Open(b)- Close(b)>= pipVal ? consecutiveBearish + 1 : 0;ind3long = consecutiveBearish >= Ind3Param1;ind3short = consecutiveBullish >= Ind3Param1;if((posType == OP_BUY && ind3long)||(posType == OP_SELL && ind3short))ClosePosition();void OpenPosition(const int command)const double stopLoss = GetStopLossPrice(command);const double takeProfit = GetTakeProfitPrice(command);ManageOrderSend(command,Entry_Amount,stopLoss,takeProfit,0);void ClosePosition(void)const int command = posType == OP_BUY ? OP_SELL : OP_BUY;ManageOrderSend(command,posLots,0,0,posTicket);"
      ],
      "actions": [
        "OrderSend(command,Entry_Amount,stopLoss,takeProfit,0)"
      ],
      "indicators_used": [
        "Accelerator",
        "Bears Power",
        "Bulls Power"
      ],
      "line_number": 1
    },
    {
      "type": "entry",
      "direction": "both",
      "conditions": [
        "#property copyright \"Forex Software Ltd.\" #property version \"6.3\" #property strict static input string _Properties_ = \"------\";static input int Magic_Number = 1224727994;static input double Entry_Amount = 0.01;input int Stop_Loss = 1053;input int Take_Profit = 0;static input string ___0______ = \"------\";input double Ind0Param0 = 0.0000;static input string ___1______ = \"------\";input int Ind1Param0 = 39;input double Ind1Param1 = 0.0000;static input string ___2______ = \"------\";input int Ind2Param0 = 30;input double Ind2Param1 = 3.4000;static input string ___3______ = \"------\";input int Ind3Param0 = 22;input int Ind3Param1 = 7;void InitIndicators(void)indHandlers[0][0][0] = iAC(NULL,0);if(Show_inds)ChartIndicatorAdd(0,1,indHandlers[0][0][0]);indHandlers[0][1][0] = iBullsPower(NULL,0,Ind1Param0);if(Show_inds)ChartIndicatorAdd(0,2,indHandlers[0][1][0]);indHandlers[0][2][0] = iBearsPower(NULL,0,Ind2Param0);if(Show_inds)ChartIndicatorAdd(0,3,indHandlers[0][2][0]);indHandlers[0][3][0] = -1;if(Show_inds)ChartIndicatorAdd(0,0,indHandlers[0][3][0]);int GetEntrySignal(void)double ind0buffer[];CopyBuffer(indHandlers[0][0][0],0,1,3,ind0buffer);double ind0val1 = ind0buffer[2];double ind0val2 = ind0buffer[1];double ind0val3 = ind0buffer[0];bool ind0long = ind0val1 < ind0val2 - sigma && ind0val2 > ind0val3 + sigma;bool ind0short = ind0val1 > ind0val2 + sigma && ind0val2 < ind0val3 - sigma;double ind1buffer[];CopyBuffer(indHandlers[0][1][0],0,1,3,ind1buffer);double ind1val1 = ind1buffer[2];double ind1val2 = ind1buffer[1];bool ind1long = ind1val1 > ind1val2 + sigma;bool ind1short = ind1val1 < ind1val2 - sigma;double ind2buffer[];CopyBuffer(indHandlers[0][2][0],0,1,3,ind2buffer);double ind2val1 = ind2buffer[2];double ind2val2 = ind2buffer[1];bool ind2long = ind2val1 < Ind2Param1 - sigma && ind2val2 > Ind2Param1 + sigma;bool ind2short = ind2val1 > -Ind2Param1 + sigma && ind2val2 < -Ind2Param1 - sigma;bool canOpenLong = ind0long && ind1long && ind2long;bool canOpenShort = ind0short && ind1short && ind2short;return canOpenLong && !canOpenShort ? OP_BUY : canOpenShort && !canOpenLong ? OP_SELL : OP_FLAT;void ManageClose(void)bool ind3long = false;bool ind3short = false;int consecutiveBullish = 0;int consecutiveBearish = 0;double pipVal = pip * Ind3Param0;for(int b = Ind3Param1 + 2;b > 0;b--)consecutiveBullish = Close(b)- Open(b)>= pipVal ? consecutiveBullish + 1 : 0;consecutiveBearish = Open(b)- Close(b)>= pipVal ? consecutiveBearish + 1 : 0;ind3long = consecutiveBearish >= Ind3Param1;ind3short = consecutiveBullish >= Ind3Param1;if((posType == OP_BUY && ind3long)||(posType == OP_SELL && ind3short))ClosePosition();void OpenPosition(const int command)const double stopLoss = GetStopLossPrice(command);const double takeProfit = GetTakeProfitPrice(command);ManageOrderSend(command,Entry_Amount,stopLoss,takeProfit,0);void ClosePosition(void)const int command = posType == OP_BUY ? OP_SELL : OP_BUY;ManageOrderSend(command,posLots,0,0,posTicket);"
      ],
      "actions": [
        "OrderSend(command,posLots,0,0,posTicket)"
      ],
      "indicators_used": [
        "Accelerator",
        "Bears Power",
        "Bulls Power"
      ],
      "line_number": 1
    }
  ],
  "indicators": [
    "Accelerator",
    "Bears Power",
    "Bulls Power"
  ],
  "symbols": [
    "CURRENT"
  ],
  "timeframes": [
    "CURRENT"
  ],
  "magic_numbers": [
    1224727994
  ],
  "created_at": "2025-07-08T01:27:23.076387",
  "source_code": "#property copyright \"Forex Software Ltd.\" #property version \"6.3\" #property strict static input string _Properties_ = \"------\";static input int Magic_Number = 1224727994;static input double Entry_Amount = 0.01;input int Stop_Loss = 1053;input int Take_Profit = 0;static input string ___0______ = \"------\";input double Ind0Param0 = 0.0000;static input string ___1______ = \"------\";input int Ind1Param0 = 39;input double Ind1Param1 = 0.0000;static input string ___2______ = \"------\";input int Ind2Param0 = 30;input double Ind2Param1 = 3.4000;static input string ___3______ = \"------\";input int Ind3Param0 = 22;input int Ind3Param1 = 7;void InitIndicators(void){indHandlers[0][0][0] = iAC(NULL,0);if(Show_inds)ChartIndicatorAdd(0,1,indHandlers[0][0][0]);indHandlers[0][1][0] = iBullsPower(NULL,0,Ind1Param0);if(Show_inds)ChartIndicatorAdd(0,2,indHandlers[0][1][0]);indHandlers[0][2][0] = iBearsPower(NULL,0,Ind2Param0);if(Show_inds)ChartIndicatorAdd(0,3,indHandlers[0][2][0]);indHandlers[0][3][0] = -1;if(Show_inds)ChartIndicatorAdd(0,0,indHandlers[0][3][0]);}int GetEntrySignal(void){double ind0buffer[];CopyBuffer(indHandlers[0][0][0],0,1,3,ind0buffer);double ind0val1 = ind0buffer[2];double ind0val2 = ind0buffer[1];double ind0val3 = ind0buffer[0];bool ind0long = ind0val1 < ind0val2 - sigma && ind0val2 > ind0val3 + sigma;bool ind0short = ind0val1 > ind0val2 + sigma && ind0val2 < ind0val3 - sigma;double ind1buffer[];CopyBuffer(indHandlers[0][1][0],0,1,3,ind1buffer);double ind1val1 = ind1buffer[2];double ind1val2 = ind1buffer[1];bool ind1long = ind1val1 > ind1val2 + sigma;bool ind1short = ind1val1 < ind1val2 - sigma;double ind2buffer[];CopyBuffer(indHandlers[0][2][0],0,1,3,ind2buffer);double ind2val1 = ind2buffer[2];double ind2val2 = ind2buffer[1];bool ind2long = ind2val1 < Ind2Param1 - sigma && ind2val2 > Ind2Param1 + sigma;bool ind2short = ind2val1 > -Ind2Param1 + sigma && ind2val2 < -Ind2Param1 - sigma;bool canOpenLong = ind0long && ind1long && ind2long;bool canOpenShort = ind0short && ind1short && ind2short;return canOpenLong && !canOpenShort ? OP_BUY : canOpenShort && !canOpenLong ? OP_SELL : OP_FLAT;}void ManageClose(void){bool ind3long = false;bool ind3short = false;{int consecutiveBullish = 0;int consecutiveBearish = 0;double pipVal = pip * Ind3Param0;for(int b = Ind3Param1 + 2;b > 0;b--){consecutiveBullish = Close(b)- Open(b)>= pipVal ? consecutiveBullish + 1 : 0;consecutiveBearish = Open(b)- Close(b)>= pipVal ? consecutiveBearish + 1 : 0;}ind3long = consecutiveBearish >= Ind3Param1;ind3short = consecutiveBullish >= Ind3Param1;}if((posType == OP_BUY && ind3long)||(posType == OP_SELL && ind3short))ClosePosition();}void OpenPosition(const int command){const double stopLoss = GetStopLossPrice(command);const double takeProfit = GetTakeProfitPrice(command);ManageOrderSend(command,Entry_Amount,stopLoss,takeProfit,0);}void ClosePosition(void){const int command = posType == OP_BUY ? OP_SELL : OP_BUY;ManageOrderSend(command,posLots,0,0,posTicket);}",
  "execution_status": "stopped",
  "performance_stats": {}
}